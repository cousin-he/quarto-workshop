[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Scientific documents with Quarto",
    "section": "",
    "text": "Preface\nThis workshop describes how to use Quarto, software for producing scientific documents and publications, in ecology and plant research.\nQuarto is a powerful and versatile tool for researchers implementing reproducible workflows. The quest for open-access research, including the final product (manuscripts) and ancillary research materials like source code, datasets, figures, pipelines or setup files, has become a prominent concern among scholars and practitioners in many fields. Prestigious publications require authors to submit these materials alongside manuscript drafts to let other colleagues reproduce and validate the results, replicate studies in new cohorts or improve their interpretability.\nQuarto combines formatted text and executable source code chunks into a single document. Code chunks can be written in different programming languages such as R, Python, Julia or Observable. As we will see, it is possible to combine different programming languages in the same document or collection of documents, increasing the flexibility of this tool.\nThis is a practical guide, presenting hands-on examples and code to produce your own Quarto documents quickly. In addition, key concepts and best practices are also presented to steer new Quarto apprentices in the right direction.\nTo learn more about Quarto visit the comprehensive guide. Quarto can produce standalone documents, books like this one, as well as complete websites.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "01-quarto.html",
    "href": "01-quarto.html",
    "title": "1  Scientific documents",
    "section": "",
    "text": "1.1 Literate programming\nThe concept of literary programming was coined by Professor Donald E. Knuth (1984). Yes, you read that right, more than 40 years ago. This concept states that it should be possible to integrate, in a single scientific document, formatted text and results of the execution of software code to compose said document dynamically. So, why has it taken us so long to put this idea into practice? Knuth’s vision, although very ahead of its time, was correct, but the technology of the time did not allow it to be put into practice.\nHowever, today we have all the essential elements to make it real. What’s more, we have a tool, Quarto, that lets us automate and manage the whole process of creating literary programming documents quickly and reliably.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Scientific documents</span>"
    ]
  },
  {
    "objectID": "01-quarto.html#reproducible-research",
    "href": "01-quarto.html#reproducible-research",
    "title": "1  Scientific documents",
    "section": "1.2 Reproducible research",
    "text": "1.2 Reproducible research\nFor many decades, the scientific method has been based on the publication of research papers describing the results of data analysis and experiments. In all cases, it is essential to be able to trust the conditions, the data collected, the method of analysis and execution of the experiments, as well as the various kinds of tools, including software, that the authors of the publication used to carry it out.\nHowever, the numerous advances in recent years in the tools and methods of analysis make it much easier to check the results of these analyses. We might assume that this makes the work of scientists much easier, but in reality the opposite is true. Let us look at some examples:\n\nOncology (Begley & Ellis, 2012): The Biotechnology Department of the firm Amgen (Thousand Oaks, CA, USA) was able to confirm only 6 of a total of 53 emblematic research articles published in this area. Bayer HealthCare (Germany) was able to validate only 25% of the studies analyzed.\nPsychology (Wicherts et al., 2006): 73% of the authors of a total of 249 articles published by the APA did not respond within a period of 6 months to the questions and requests formulated about the data they used in their research.\nEconomics and Finance (Burman et al., 2010): A comparison of different software packages applied in the execution of various financial and statistical model analyses shows that each of these packages produces very different results using the same statistical techniques directly applied to identical data as those used in the original publication.\n\nIn fact, articles have even appeared suggesting that many of the results published in areas such as Medicine may not be entirely reliable (Ioannidis, 2005). As a result of all these recent findings, a great controversy has been generated throughout the scientific and research community, accompanied by a deep crisis of confidence.\nNevertheless, as a well-known comic strip about the academic world and research (see Figure 1.2) very well describes, the process of developing scientific publications is based primarily on the continuous review of methods and results (starting with the students themselves and their supervisors).\n\n\n\n\n\n\nFigure 1.2: Comic strip representing the review model for scientific publications. Source: PhD comics.\n\n\n\nThe Figure 1.3 shows a graph published in the prestigious journal Science Magazine (Brainard et al., 2018), which represents the data on the evolution of the number of research articles retracted or withdrawn for various reasons, between 1997 and 2014. In this graph, we can see how the improvement of tools and the greater availability of resources allow for the analysis and review of a greater volume of publications and analyses, which allows for the detection of a greater number of problematic cases.\n\n\n\n\n\n\nFigure 1.3: Evolution of the number of scientific publications retracted or withdrawn for various reasons, between 1997 and 2014. Source: Science Magazine (Brainard et al., 2018).\n\n\n\n\n1.2.1 Reproducibility and replicability\nThere is often talk of reproducing and replicating a data analysis or a scientific experiment (Leek & Peng, 2015). However, many evidences can found showing that there are incompatible definitions of these two and other related terms (Barba, 2018). Be very careful, therefore, because depending on the scientific community or the field of knowledge in which we find ourselves, the meaning of these two terms may even be entirely opposite to their accepted definition in other areas 1. Here we will stick to the definition accepted in a large number of areas, including statistics or scientific computing (see Barba, 2018, p. 33):\n\nReproducibility: It is defined as the ability to recompute the results of an analysis, with the same data that were used in the original analysis, and knowing the details of the sequence (workflow or pipeline) of operations that make up said analysis. Certain premises must be able to be guaranteed:\n\nIf we use the same tools (e.g. R, a certain list of packages, the same versions of all packages and dependencies), as well as the same code (R scripts) on the same data, the results and conclusions must be consistent with those of the original analysis.\nThe authors of the original analysis must provide all the elements (data, code and procedure used) to allow the analysis to be reproducible (Barba, 2018).\n\nReplicability: It is defined as the ability to perform an experiment or analysis independent of the original, that addresses the same objective but on a set of data different from that used in the initial study. If the results are not consistent, it will be necessary to carry out more replications and harmonize the results and conclusions through appropriate techniques, such as meta-analysis.\n\n\n\n1.2.2 Replication levels\nDepending on the elements published by the authors of the original study, as well as the level of detail with which the process for carrying out the study is described, the steps that have been followed and the tools used, we have different levels of replicability or reproducibility, represented in the Figure 1.4.\n\nNot reproducible: No data, code or any specific description of the implementation of the study or analysis is provided. Many scientific publications no longer accept publishing articles under these conditions.\nCode or Data: A good number of publishers request that the data sets used in the analysis or study of the publication be accessible through a URL, either because they are available in a public repository or because the authors of the article have published it. Likewise, many publications require that the software code to carry out the analysis is also publicly accessible, in an open source repository or in a freely accessible version control service project.\nCode and data: Ideally, both the code and the data should be publicly accessible for anyone who wants to examine them or use them to reproduce the results (validation) or replicate the analysis with other data or other cases.\nRuntime environment and linked data: A further step to facilitate the reproducibility of studies consists of publishing code and metadata files with more precise information about the programming language, the software packages used and any other dependencies necessary to carry out the same study or analysis. Another variant to facilitate reproducibility is to encapsulate the code and dependencies in a preconfigured virtual container, which can be downloaded and executed directly.\nGold standard: The most advanced level would consist of documenting all the procedures performed during the study or analysis, including the coding of the tasks of obtaining, cleaning and preparing the data, as well as the generation of graphics to visualize the results or any other results derived from the study.\n\n\n\n\n\n\n\nFigure 1.4: Replication levels spectrum in scientific publications. Source: Peng (2011).\n\n\n\n\n\n1.2.3 Replicability tools\nCertain technologies and tools that have become more sophisticated and refined in recent years are making it easier to replicate data processing and analysis.\n\nVersion Control Systems for software code (SCV): tools such as Git, Mercurial and web services such as GitHub or GitLab have popularized the creation and publication of projects that allow the management of the software code that has been created, controlling the changes and the released versions. Web services also integrate a good number of tools to support different facets of the software development process, such as the generation of documentation, manuals and examples, error reports and requests for improvements, continuous integration and continuous deployment (CI/CD), systematic testing of the generated code, etc. If you have not yet considered how using a source code version control tool can benefit you, take a look at Figure 1.5 where you will relive a situation that is unfortunately very common among researchers and scientists who develop software solutions.\n\n\n\n\n\n\n\nFigure 1.5: Software version control. Source: PhD Comics\n\n\n\n\nSoftware virtualization and containers: In a technological environment dominated by the contracting and deployment of computing infrastructure and services in cloud computing architectures, packaging and virtualization tools for software applications and services that can be installed and deployed in a short time have revolutionized the way software products are published and managed, including data processing and analysis products.\nData version control: In a similar way to SCV for source code, software is appearing to apply the same principles to data files. In this way, we can control different versions of each data file, modifications made to them, etc. One of these tools is Data Version Control (DVC), which allows versioning of data and models. As a result, we can know at all times which version of the data and which list of features have been included in each model considered during the analysis, keeping the descriptive information about these three essential components that must always be cohesive.\n\n\n\n\n\n\n\nFigure 1.6: Data, code and model versioning example maintained by DVC. Source: DVC Documentation.\n\n\n\n\nModel and experiment management: Another type of machine learning project management tool is one that allows the organization, monitoring, comparison, and selection of the experiments and models we have carried out. One of the most recent notable examples is ML Flow, which provides support for model tuning, evaluation, and optimization, deployment of models in production environments, creation of a registry of pre-trained models, etc. Of course, it is possible to combine this type of tool with others such as DVC, creating a comprehensive management environment for our projects.\nCreation and management of data processing pipelines: the last essential element in any data processing and analysis project that must take care of scalability is a tool for creation and management of data processing and analysis flows or pipelines. The set of all the pipelines in our project make up the general workflow of the project. These tools are known as data or workflow orchestrators. In this category, we have both very powerful and feature-packed tools such as Apache Airflow or Prefect and simpler and more straightforward ones such as Luigi.\n\nOf course, the R community has not remained oblivious to these new trends, in particular the R OpenSci initiative, within which we find many packages (published in the official CRAN repository) that cover various aspects of scientific work, including the management of pipelines and workflows through the targets package.\n\nUser manual for the R package targets.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Scientific documents</span>"
    ]
  },
  {
    "objectID": "01-quarto.html#quarto-for-scientific-publications",
    "href": "01-quarto.html#quarto-for-scientific-publications",
    "title": "1  Scientific documents",
    "section": "1.3 Quarto for scientific publications",
    "text": "1.3 Quarto for scientific publications\nNow that we know the fundamental concept on which Quarto works and its application to achieve a higher level of reproducibility and transparency in our scientific process, we are going to explain in more detail the process that Quarto follows to compose a document. The Figure 1.7 presents a diagram with the document creation process and the elements and tools that come into play to achieve it.\n\n\n\n\n\n\nFigure 1.7: Content creation process with Quarto.\n\n\n\n\nQuarto: a software that allows you to create scientific documentation following the principles of literary programming.\nKnitr and programming language: the knitr package is responsible for the connection with an interpreter of a programming language (R, Python, Julia) that can be executed in a REPL environment, in order to be able to execute software code fragments integrated into the document and generate content in Markdown format as a result.\nMarkdown (formatted content): a textual content markup language that allows easy formatting of the information in our documents created with Quarto.\nPandoc (universal translator of document formats): this software receives the content already formatted using the Markdown standard, to convert it into the selected output type. There are several options available: HTML, PDF or Word, as well as slides, websites or interactive panels (dashboards).",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Scientific documents</span>"
    ]
  },
  {
    "objectID": "01-quarto.html#sec-quarto-install",
    "href": "01-quarto.html#sec-quarto-install",
    "title": "1  Scientific documents",
    "section": "1.4 Quartion installation",
    "text": "1.4 Quartion installation\nTo install the latest version of Quarto software on your system, point your web browser to the page https://quarto.org/docs/get-started/. Here, download and install the file corresponding to your operating system.\nAt this time, the latest version of Quarto available is 1.5.57.\n\n\n\n\n\n\nSoftware requirements to generate PDF documents\n\n\n\nBy default, the output format of documents generated with Quarto is HTML. If we want to generate PDF documents, we need to have a LaTeX distribution installed. For more information, see Section 3.3.\n\n\n\n\n\n\nBarba, L. A. (2018). Terminologies for reproducible research. arXiv Preprint arXiv:1802.03311.\n\n\nBegley, C., & Ellis, L. (2012). Drug development: Raise standards for preclinical cancer research. Nature.[Online]. 483 (7391).\n\n\nBrainard, J., You, J., et al. (2018). What a massive database of retracted papers reveals about science publishing’s “death penalty.” Science, 25(1), 1–5.\n\n\nBurman, L. E., Reed, W. R., & Alm, J. (2010). A call for replication studies. Public Finance Review, 38(6), 787–793.\n\n\nIoannidis, J. P. (2005). Why most published research findings are false. PLoS Medicine, 2(8), e124.\n\n\nKnuth, D. E. (1984). Literate programming. Comput. J., 27(2), 97–111. https://doi.org/10.1093/comjnl/27.2.97\n\n\nLeek, J. T., & Peng, R. D. (2015). Reproducible research can still be wrong: Adopting a prevention approach. Proceedings of the National Academy of Sciences, 112(6), 1645–1646.\n\n\nPeng, R. D. (2011). Reproducible research in computational science. Science, 334(6060), 1226–1227.\n\n\nWicherts, J. M., Borsboom, D., Kats, J., & Molenaar, D. (2006). The poor availability of psychological research data for reanalysis. American PAsychologist, 61(7), 726.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Scientific documents</span>"
    ]
  },
  {
    "objectID": "01-quarto.html#footnotes",
    "href": "01-quarto.html#footnotes",
    "title": "1  Scientific documents",
    "section": "",
    "text": "Among the most important examples of definitions that contradict those we give in this workshop are those adopted by the Federation of American Societies for Experimental Biology (FASEB), in immunology and microbiology, as well as those adopted by the Association for Computer Machinery (ACM) in computer science.↩︎",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Scientific documents</span>"
    ]
  },
  {
    "objectID": "02-doctypes.html",
    "href": "02-doctypes.html",
    "title": "2  Types of documents",
    "section": "",
    "text": "2.1 Individual documents\nThe easiest way to work with Quarto is to create a document individual. Said document may use the sections or chunks of code to read input data or download it from some source, process them, analyze them and display the results. Graphics can be added, tables, equations, bibliographic references and many other elements.\nThe documents always have a standard structure:",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Types of documents</span>"
    ]
  },
  {
    "objectID": "02-doctypes.html#individual-documents",
    "href": "02-doctypes.html#individual-documents",
    "title": "2  Types of documents",
    "section": "",
    "text": "Preamble: in which configuration options are specified for the creation of the document with Quarto and its associated tools.\nBody: the section that houses the main content of the document, including sections of Markdown-formatted text and sections of code executable. The software code may be shown, if useful, or be hidden in the final result.\nReferences: References are included at the end of the document bibliographical, as is usual in scientific texts.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Types of documents</span>"
    ]
  },
  {
    "objectID": "02-doctypes.html#books",
    "href": "02-doctypes.html#books",
    "title": "2  Types of documents",
    "section": "2.2 Books",
    "text": "2.2 Books\nThe natural evolution of the previous case is to gather a collection of documents individuals in a single book. Quarto books allows you to create this type of documents, structured in parts, chapters and sections. The options of configuration will allow you to create an introductory cover for the site website that contains the chapters (one document per chapter) or the elements necessary to create a PDF book, similar to those published by a editorial.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Types of documents</span>"
    ]
  },
  {
    "objectID": "02-doctypes.html#articles-and-publications",
    "href": "02-doctypes.html#articles-and-publications",
    "title": "2  Types of documents",
    "section": "2.3 Articles and publications",
    "text": "2.3 Articles and publications\nOne of the key results in any scientific process is the production of articles and publications (technical reports, etc.) that collect the results and progress achieved scientists. In this case, Quarto can also help us, with the collaboration of other essential elements such as the R package rticles, which provides templates to generate articles according to the specifications of the main scientific publications and publishers in a multitude of fields of knowledge.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Types of documents</span>"
    ]
  },
  {
    "objectID": "02-doctypes.html#presentations",
    "href": "02-doctypes.html#presentations",
    "title": "2  Types of documents",
    "section": "2.4 Presentations",
    "text": "2.4 Presentations\nIt is also possible to generate presentations (usually in HTML format) with slides through Quarto. In this case, we would have the support of several packages and environments of creating web presentations at our disposal, such as reveal.js (HTML), Beamer (for LaTeX/PDF) or MS Office PPTX format.\nWe will not discuss this case in this workshop, but you can obtain more information in the online guide, available at https://quarto.org/docs/presentations/.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Types of documents</span>"
    ]
  },
  {
    "objectID": "02-doctypes.html#websites",
    "href": "02-doctypes.html#websites",
    "title": "2  Types of documents",
    "section": "2.5 Websites",
    "text": "2.5 Websites\nAnother option that may be interesting is to create personal websites (for example, for show our CV and a selection of featured works, publications, etc.), blogs and even corporate websites (organization, research group) quickly using Quarto. There are numerous free and paid templates now available to create websites with a beautiful look. harmonized, although we will need to learn a little HTML and CSS to be able to customize further our website.\nHere is an example of an environmental technology researcher website created with Fourth: https://www.mm218.dev/. More examples of different types of websites generated with Quarto: https://drganghe.github.io/quarto-academic-site-examples.html.\nMore information and tutorials for creating websites with Quarto can be found at https://quarto.org/docs/websites/.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Types of documents</span>"
    ]
  },
  {
    "objectID": "02-doctypes.html#dashboards",
    "href": "02-doctypes.html#dashboards",
    "title": "2  Types of documents",
    "section": "2.6 Dashboards",
    "text": "2.6 Dashboards\nFinally, it is possible to create custom dashboards for monitoring. of data, analysis of models and results or for examples and teaching applications using Quarto, as described in the guide https://quarto.org/docs/dashboards/.\nIn this case we can include among the tools Shiny, a package software for R (also available for Python) with which to create interactive applications based into data quickly and easily.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Types of documents</span>"
    ]
  },
  {
    "objectID": "03-workflow.html",
    "href": "03-workflow.html",
    "title": "3  Quarto workflow",
    "section": "",
    "text": "3.1 Document assembly line\nWe can consider the process of creating a document in Quarto as a chain assembly in which various software tools are applied sequentially to produce the final document in different output formats.\nFinally, it should be noted that document viewing programs are needed to load the documents. Output documents, depending on format: web browser (HTML), MS Word (DOC/DOCX files), PDF viewer (PDF files).",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Quarto workflow</span>"
    ]
  },
  {
    "objectID": "03-workflow.html#document-assembly-line",
    "href": "03-workflow.html#document-assembly-line",
    "title": "3  Quarto workflow",
    "section": "",
    "text": "Quarto: The first agent that intervenes in the interpretation of the file with extension .qmd is Quarto. The program must be previously installed on our computer to that the development environment that we decide to use (RStudio, Microsoft VS Code, etc.) can find it. Quarto is responsible for interpreting the content of the file and considering the different configuration options that we have inserted in the header of the document, as well as in executable code fragments, to delegate the construction tasks of the different parts of the document to other tools.\nQuarto is also responsible for automatically inserting some authoring elements of documents (such as callouts, explained in Section 4.5.4), while the generation of other elements (numbering of figures, tables, bibliographic citations, etc.) It is delegated to other tools like Pandoc.\nCode execution engine (engine): One of the great advantages of document production in Quarto is the possibility of inserting fragments of executable code in our documents. Quarto can work with different engines (engines in Quarto terminology) that interpret the code and return the result of its execution to integrate it into the final document.\n\nAll R language code blocks use the knitr package as engine execution.\nExecutable code blocks in other languages ​​supported in Quarto (Python, Julia, Observable) use the kernel available in the Jupyter tool for execution, except in the explicit case that blocks of code are combined in R and Python in the same document.\nIn the particular case that the same document combines code blocks in R and Python, then the Knitr tool is used for the R code along with the R reticulate package to execute the blocks written in Python. This combination has the additional advantage that it is possible “pass” variables and results between the R and Python runtimes, so that we can use variables and data structures created in the R part within our Python code and vice versa.\n\nMarkdown: The intermediate product of all the previous phases is a file in Markdown (.md extension), which already integrates the formatted textual content and many of the results and elements additional generated by the different tools that have come into play up to this point. If useful, this intermediate file can be stored for review or for use it for other purposes. This file is then sent to Pandoc for the last stage document creation.\nPandoc: The Pandoc project offers a software tool to translate documents between different information representation formats. As you can quickly see On the main page of the project, the list of supported formats is really extensive. For purposes Practically speaking, Quarto uses Pandoc’s ability to receive as input a document in Markdown and generate output in three possible formats: HTML, DOC/DOCX or PDF. The Markdown file must include specific syntax to encode certain elements (cross-references, bibliographic citations, figures, tables, equations, etc.) that we will present in the following chapters, so that Pandoc can interpret these elements and represent them appropriately in each output format.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Quarto workflow</span>"
    ]
  },
  {
    "objectID": "03-workflow.html#producing-html",
    "href": "03-workflow.html#producing-html",
    "title": "3  Quarto workflow",
    "section": "3.2 Producing HTML",
    "text": "3.2 Producing HTML\nThe default option for the output format of Quarto documents is to generate an HTML document, which can be viewed with most modern web browsers. This output format has several advantages:\n\nIt is quite likely that the recipient of the document already has one or more browsers installed on your system to view the document, if we send or share it directly to you.\nIt is easier to publish this type of documents on the Web, using one of the different platforms available for this purpose:\n\nQuarto Pub, a document publishing service that allows are publicly accessible.\nIndividual documents (see Chapter 4) and books or collections of Documents (see Chapter 5) can be published easily and quickly on publishing sites. hosting software projects such as GitHub or GitLab, which also provide hosting services version control, bug/improvement reporting management, documentation, testing, etc.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Quarto workflow</span>"
    ]
  },
  {
    "objectID": "03-workflow.html#sec-pdf-reqs",
    "href": "03-workflow.html#sec-pdf-reqs",
    "title": "3  Quarto workflow",
    "section": "3.3 Producing PDF",
    "text": "3.3 Producing PDF\nUnlike in HTML, when we generate PDF documents an additional compilation step is added of the document at the end of the entire assembly line, using LaTeX and the compilation engine XeLaTeX to generate PDF output. Therefore, if we select this output option it is essential have a TeX/LaTeX distribution previously installed on our system, to compile and generate the documents. If we do not have any yet, you can install TinyTeX, a lightweight distribution of TeX Live which is much smaller in size (~100 MB vs. to more than 4 GB of full TeX Live).\n\n3.3.1 Customising PDF documents\nPredefined LaTeX document templates can be used. By default, Quarto uses various templates from the LaTeX package collection koma-script.\nSome of these templates can work relatively easily in Quarto, while Others require some adaptation, for which some knowledge about Latex. This is probably a more advanced topic for many users, so for now I don’t We are going to discuss it in this introductory workshop.\nHowever, as an example, we offer below a list of some examples that illustrate the enormous possibilities of this type of templates:\n\nProfessor R.J. Hyndman has published Monash University Quarto document templates, that can be used as a starting point to customize them in our own projects.\nThe repository Awesome Quarto Thesis collects a list of Quarto templates to generate TFG/TFM reports and doctoral theses for some universities. Also linked is a generic extension template for Quarto, designed to make it easier for other users to customize it according to the criteria marked by their own institution to generate these jobs.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Quarto workflow</span>"
    ]
  },
  {
    "objectID": "04-singledoc.html",
    "href": "04-singledoc.html",
    "title": "4  Individual Documents",
    "section": "",
    "text": "4.1 Creating a document with RStudio\nBefore you start, make sure you have installed the Quarto software on your machine. It is a standalone software program, which needs to be installed for the rest of the process to work (see the Section 1.4 section).\nIf you already have a recent version of RStudio installed, you will need to install the following packages for the example:\ninstall.packages(\"tidyverse\")\ninstall.packages(\"palmerpenguins\")\ninstall.packages(\"quarto\")\nNow, in RStudio we create a new project choosing the Quarto project option, as it appears in Figure 4.1.\nWe can name our project directory as first-example and click Create Project.\nAs a result, a new project should appear open on the screen, with the appearance shown in Figure 4.2.\nSpecifically, in the upper left panel we can see that, by default, the Visual editor has been opened, which allows creating Quarto documents in a more intuitive way. However, to start getting familiar with the structure of a quarto document from the beginning, we will switch to the Source editor to view the source code, by clicking on the button shown in the figure Figure 4.3.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Individual Documents</span>"
    ]
  },
  {
    "objectID": "04-singledoc.html#creating-a-document-with-rstudio",
    "href": "04-singledoc.html#creating-a-document-with-rstudio",
    "title": "4  Individual Documents",
    "section": "",
    "text": "Figure 4.1: New Quarto project\n\n\n\n\n\n\n\n\n\n\n\nFigure 4.2: First example\n\n\n\n\n\n\n\n\n\n\nFigure 4.3: Source editor",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Individual Documents</span>"
    ]
  },
  {
    "objectID": "04-singledoc.html#document-structure",
    "href": "04-singledoc.html#document-structure",
    "title": "4  Individual Documents",
    "section": "4.2 Document structure",
    "text": "4.2 Document structure\nThe following example code presents a basic structure of an individual Quarto document.\n---\ntitle: \"My first document\"\nauthor: John Doe\ndate: 2024-12-20\n---\n\nHere we have a line of formatted Markdown content.\n\n```{r}\n#| label: my-label\n\n# This is a code chunk. You can place here executable\n# code that will be run by the R interprenter. By default, the final\n# document will automatically integrate both the input code and the\n# output from its execution\na &lt;- 1 + 1\n```\n\n*Additional* Markdown content after the code chunk.\nThe file content consists of two parts:\n\nPreamble: is delimited by two --- tags. Within this area we can assign values ​​to configuration options for layout and creating the document, such as title, author(s), date, etc.\n\nWe can also configure various options related to the output format of the documents.\n\nDocument body: is composed of text paragraphs formatted using the Markdown markup syntax, which we will see later. In addition, executable code fragments or chunks can also be inserted into the text, which are marked up using a special syntax (as we see in the example above).\n\nEach chunk of executable code is delimited as follows:\n```{r}\n# Código en R\n```\n\n\n\n\n\n\nSupport for additional programming languages\n\n\n\nAlthough in this workshop we focus on the R language, you should know that Quarto also supports other programming languages ​​such as Python, Julia or Observable.\nWe can change the programming language of each code chunk by indicating its name at the beginning, for example:\n```{python}\n# Código en Python\n```\nNevertheless, this code chunk in other languages requires additional configuration. For example, we must set up a Python interpreter to execute code chunks written in this language.\n\n\n\n4.2.1 The preamble\nA basic example of a preamble is as follows (although it would be sufficient to simply provide a title for the document):\n---\ntitle: \"My first document\"\nauthor: John Doe\ndate: 2024-12-20\n---\nOf course, more options can be added, which we will explain next\n\n\n4.2.2 List of options\nThere is an extensive list of configuration options that we can include in our documents.\n\nHTML output options: these allow us to configure various basic aspects of the document, such as the title and subtitle, date, author (or list of authors), summary or DOI; formatting options such as the subject or advanced styles for HTML content with CSS; numbering and table of contents, etc.\nBasic options for HTML with Quarto.\nComplete list of HTML options with Quarto.\nPDF output options: these offer the possibility of configuring multiple parameters for the creation of the document in this format, many of them similar to those for the HTML output. A particularly relevant option is to choose the LaTeX document format (documentclass option), which defines the general appearance of the layout to be used. By default, classes from the KOMA Script metapackage are used, such as scrartcl or scrbook. It is also important to indicate the papersize option, in our case to ensure that a standard format is used such as A4. The citation format is also relevant, being able to choose, for example, the BibLaTeX engine which is more powerful, with multilingual support and for native UTF-8 character encoding. Finally, it is also important to indicate the compilation engine. If you want full flexibility in document layout, it is highly recommended to use the XeLaTeX engine (option pdf-engine: xelatex), which is the default used by Quarto.\nQuarto PDF Basics.\nComplete list of PDF options available with Quarto.\n\n\n\n4.2.3 Basic Markdown syntax\nIn the following link you can find a quick basic tutorial that shows the basic options of the Markdown syntax accepted in Quarto documents to format textual content.\n\nBasic guide to markdown syntax.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Individual Documents</span>"
    ]
  },
  {
    "objectID": "04-singledoc.html#creating-documents-output",
    "href": "04-singledoc.html#creating-documents-output",
    "title": "4  Individual Documents",
    "section": "4.3 Creating documents (output)",
    "text": "4.3 Creating documents (output)\nBy default, if we do not indicate anything, Quarto will generate a single output format of the document in HTML. However, it is possible to define more than one output format by including more configuration options. Of course, you can indicate different options to generate several output formats simultaneously, or to choose the output format that we want to produce based on our interests, selecting the format that we need when previewing or when generating the final document.\n\n4.3.1 Preview\nTo preview the document we have to press the Render button in the tools menu of the RStudio interface, as shown in Figure 4.4.\n\n\n\n\n\n\nFigure 4.4: Render button to preview the generated document.\n\n\n\nBy default, our main web browser or a panel in the RStudio interface will open showing the HTML page with the document already generated. By clicking on the gear icon next to the Render button we can select, among other things, the type of preview we want to be launched after completing the creation of the document or completely disable said preview. Available options are shown in Figure 4.5\n\n\n\n\n\n\nFigure 4.5: Render operation preview options.\n\n\n\n\n\n4.3.2 Selecting output type\nWhen we have several output format options configured in our document, we can choose at preview time which of the formats is chosen to generate the document. In the Figure 4.6 you can see an example of a document that includes settings for two output formats (HTML and PDF) and the change in the Render button, in which a small black arrow now appears just to the right of the button icon to display the two available output options.\n\n\n\n\n\n\nFigure 4.6: Selecting output formats with the Render operation.\n\n\n\n\n\n4.3.3 Basic configuration options\nBelow is an example of some basic configuration options that are typically found in documents formatted as HTML output.\n---\ntitle: \"My first document\"\nauthor: \n  - \"John Doe\"\n  - \"Mary Jane\"\ndate: 2024-12-20\n\nlang: en\nbibliography: references.bib\n\nformat:\n  html:\n    theme: cosmo\n    toc: true\n    number-sections: true\n    html-math-method: katex\n    css: styles.css\n  pdf:\n    documentclass: scrreprt\n---\n\nREST OF THE DOCUMENT\nIn this example, in addition to the author and the date, a list of two authors is indicated, the main language of the document (Spanish), the bibliography reference file (in .bib format) and, within the HTML options, the layout topic, the inclusion of a table of contents (located by default at the top right), section numbering, selection of the engine to render equations in the document and a custom styles file in CSS format to adjust some fine layout options.\nOne option worth highlighting is to force all resources (images, style information, etc.) to be integrated into the HTML file itself, to facilitate direct sharing or publication of the document without having to also provide the auxiliary files necessary to display it in the browser. This option is shown below:\nformat:\n  html:\n    embed-resources: true",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Individual Documents</span>"
    ]
  },
  {
    "objectID": "04-singledoc.html#executable-code-chunks",
    "href": "04-singledoc.html#executable-code-chunks",
    "title": "4  Individual Documents",
    "section": "4.4 Executable code chunks",
    "text": "4.4 Executable code chunks\nThe most distinctive feature of documents created with Quarto is the possibility of inserting executable code fragments, called chunks, into the document itself. This also includes the option for said code to generate different results (numeric, graphic, tables, animations, etc.) that are integrated directly into the document. In this way, if we keep the code updated, the correct versions of said results will always be generated.\nThe executable code fragments have the following structure:\n```{r}\n#| label: id-fragmento\n\n# Aquí va el código ejecutable\na = c(1, 2, 3, 4)\nb = a^2\n```\nThe triplet of characters ``` is called a fence and delimits the beginning and end of the code fragment. Immediately after the opening delimiter, the identifier of the programming language in which the code of that fragment is written is written in curly braces. This information is used to choose the appropriate syntax highlighting to display the code of that language and to select the interpreter that executes the code and produces the results.\nIn the following lines we can include one or several configuration options specific to that code fragment, using the syntax #| option: value. For example, in the previous fragment the option #| label: fragment-id creates a label (which must be unique) to identify that fragment of code within the document.\n\nList of options for code fragments.\n\nSome frequently used options are:\n\neval: true | false | [...]: Indicates whether the content of that snippet should be evaluated (executed). A list of positive or negative line numbers can be passed to explicitly select which lines of code are included (positive) or excluded (negative) from execution.\necho: true | false | fenced | [...]: Indicates whether the source code of the snippet should be included in the document or not. The fenced option also includes the cell delimiter as part of the output. Finally, it also accepts a list of positive or negative line numbers to select which lines of code will or will not be displayed in the snippet.\noutput: true | false | asis: To decide whether the result of the code execution is included in the document or not. The asis value forces the result to be treated as raw Markdown content.\nwarning: true | false: Indicates whether warning messages should be included in the output.\nerror: true | false: Indicates whether generated error messages are included in the output.\nmessage: true | false: Indicates whether generated information messages are included in the output.\n\nWhen fragments generate figures, these are inserted into the document itself. Let’s look at an example:\n\n```{r}\n#| label: fig-example-cars\n#| fig-cap: \"Gráfico de correlación lineal positiva entre el kilometraje en ciudad y en carretera de diferentes modelos de coches.\"\n\nlibrary(ggplot2)\n#| label: scatterplot\n#| echo: true\n\nggplot(mpg, aes(x = hwy, y = cty, color = cyl)) +\n  geom_point(alpha = 0.5, size = 2) +\n  scale_color_viridis_c() +\n  theme_minimal()\n```\n\n\n\n\n\n\n\nFigure 4.7: Gráfico de correlación lineal positiva entre el kilometraje en ciudad y en carretera de diferentes modelos de coches.\n\n\n\n\n\n\n\n\n\n\n\nAutomated figure numbering\n\n\n\nIt is important that the fragment identifier we choose for the code that generates one or more figures begins with the prefix fig-.\nIn this way, we ensure that Quarto automatically assigns a number to the generated figure and that we can create cross-references (internal links) to that figure in our document.\nAs we will see later, other output types such as tables also need to be assigned a specific pattern in their fragment identifier so that they are automatically numbered and can be referenced within the document.\n\n\nFigure management in Quarto is quite sophisticated, to the point that you can easily organize several subfigures with their respective individual descriptions, as shown in the following example using some additional options.\n```{r}\n#| label: fig-mpg-subplot\n#| fig-cap: \"City and road mileage of 38 popular car models.\"\n#|\n#| fig-subcap:\n#|   - \"Color by num. of cylinders.\"\n#|   - \"Color by motor displacement.\"\n#| layout-ncol: 1\n\nggplot(mpg, aes(x = hwy, y = cty, color = cyl)) +\n  geom_point(alpha = 0.5, size = 2) +\n  scale_color_viridis_c() +\n  theme_minimal()\n\nggplot(mpg, aes(x = hwy, y = cty, color = displ)) +\n  geom_point(alpha = 0.5, size = 2) +\n  scale_color_viridis_c(option = \"E\") +\n  theme_minimal()\n```\n\n\n\n\n\n\n\n\n\n\n\n(a) Color by num. of cylinders.\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Color by motor displacement.\n\n\n\n\n\n\n\nFigure 4.8: City and road mileage of 38 popular car models.\n\n\n\nSome common options for chunks that generate figures are:\n\nfig-width: Width of the figure.\nfig-height: Height of the figure.\nfig-cap: String in quotes to be inserted as a caption.\nfig-alt: Alternative text message that fills the alt attribute of the HTML image (for example, to improve the accessibility of the content).\nfig-dpi: Resolution setting of the figure (in dots per inch).\n\nThe tutorial on executable code snippets in the official documentation presents more information and examples on how to use this powerful Quarto feature.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Individual Documents</span>"
    ]
  },
  {
    "objectID": "04-singledoc.html#author-toolkit",
    "href": "04-singledoc.html#author-toolkit",
    "title": "4  Individual Documents",
    "section": "4.5 Author toolkit",
    "text": "4.5 Author toolkit\nIn addition to the ability to integrate executable code and its results into our scientific papers, Quarto includes a number of resources and tools to provide a complete and efficient authoring experience.\n\n4.5.1 Document sections\nAs we saw in the Section 4.3.3 example, there are two HTML document configuration options that allow us to number sections and incorporate an automatically generated table of contents at the top right of our document.\nformat:\n  html:\n    toc: true\n    number-sections: true\nAn important feature for creating scientific documentation is being able to include cross-references, that is, links that take us to other sections of the document. In Quarto this is achieved by following a simple procedure in two steps:\n\nWe add a unique tag to identify the section with the syntax:\n\n## Section header {#sec-tag}\n\nWe reference the tag we created for that section in another part of the text, so that Quarto automatically creates the link (cross-reference) to that section:\n\nIn the text we add a reference to the @sec-tag.\nAn example of this type of automatically created cross-reference can be seen at the beginning of this section. On the other hand, if we want a section of the document to be excluded from the numbering scheme of the rest of the sections, we use the special tag in the title of that section:\n## Unnumbered section {.unnumbered}\nThere are several additional options that control the way and style in which sections are created and numbered. Some of them are:\n\nanchor-sections: Causes an anchor link to be displayed (to link directly to that section in another document) when the mouse hovers over a section title.\ntoc-depth: Specifies how many levels deep the section numbering appears in the table of contents. By default, 3 levels are displayed.\ntoc-location: body | left | right | left-body | right-body: Controls the location where the table of contents appears in the document.\ntoc-title: String with the title of the table of contents.\ntoc-expand: Indicates whether all sections in the table of contents should be expanded or collapsed so the user can click on the ones they want to expand.\nnumber-depth: Determines the maximum depth to which sections in the document are numbered (note, this should be in line with the value assigned to the toc-depth option).\nnumber-offset: Allows you to set the number at which sections are numbered. If we want the document to start numbering the highest level section as “4” then we use number-offset: 3. If we want the document to start at a level 2 section numbered “1.5” we must specify number-offset: [1,4]. Setting a value for this option means that number-sections: true is automatically set.\n\n\n\n4.5.2 Equations\nAnother essential aspect of scientific documents is the appearance of mathematical symbols, formulas, and equations. There are several HTML libraries that allow properly formatted equations to be displayed on the screen. For its part, LaTeX, due to its origins, has always included powerful and versatile tools to handle this type of content, so support is guaranteed for PDF documents.\nIn general, the syntax used to write equations is very similar to that used in LaTeX.\n\nTutorial on mathematical expressions in LaTeX.\nSummary of mathematical syntax in LaTeX.\n\nThere are two ways to display equations in our content, also following a similar philosophy to that of LaTeX documents:\n\nEquations in line with the text: to display the equation within a line or paragraph, at the same height as the rest of the text.\nEquations in display mode: the equation is displayed in a separate space, between two paragraphs of text and with a certain margin of space at the top and bottom.\n\nExample of an inline equation: $F = m \\cdot a$\nResult: example of an inline equation: \\(F = m \\cdot a\\).\nExample of an equation in display mode:\n\n$$E = mc^{2}$$\nWhich produces the following result (see below how to add the numbering):\n\\[ E = mc^{2}  \\tag{4.1}\\]\nIf we also want to number our equations, we must remember to use the unique identifier tag pattern eq-tag to identify it and then be able to insert internal references to said equation in the text.\n$$ E = mc^{2} $$ {#eq-energy}\nAs a result, we can insert a cross-link to Equation 4.1.\n\n\n4.5.3 Tables\nTables are another relevant content that we can format in different ways in the documents generated with Quarto.\n\nIntroduction to creating tables in Quarto.\n\nIn this case, the visual editor can greatly simplify this task for us. It is advisable to try it to see the difference, since it is a very intuitive tool. However, following the same line as the rest of the workshop, here we will describe the details to create this content directly in the Markdown code of the file.\nThe most direct way to create a table in Markdown is to compose a pipe table, so called because its syntax is based on the | operator on the command line. Let’s see an example.\n| Default | Left | Right | Center |\n|---------|:-----|------:|:------:|\n| 1       | 2    |     3 |    4   |\n| 22      | 23   |    24 |   25   |\n| 4       | 3    |     2 |   1    |\nThe result of including the previous code in our document is:\n\n\n\nDefault\nLeft\nRight\nCenter\n\n\n\n\n1\n2\n3\n4\n\n\n22\n23\n24\n25\n\n\n4\n3\n2\n1\n\n\n\nWe can see how the key to controlling the horizontal alignment of the table content is to properly place the : symbol on the line just below the title line, which separates it from the body of the table. If we do not want to include a title, it is mandatory to include the first line, but we can leave the cells blank.\nBelow the table we can insert the expression : Table Caption to include a descriptive message. It is also possible to directly use some style elements included in the classes of Bootstrap, the web style framework that Quarto uses to compose pages (we have seen before how to use the document option theme: cosmo to use the Cosmo theme of Bootstrap). There are different effects, and one of the most frequent is to color the background of the rows in gray alternately as well as highlight the row on which the mouse arrow is placed. These two effects are .striped and .hover, respectively.\n| Default | Left | Right | Center |\n|---------|:-----|------:|:------:|\n| 1       | 2    |     3 |    4   |\n| 22      | 23   |    24 |   25   |\n| 4       | 3    |     2 |   1    |\n\n: This is the table caption. {.striped .hover}\n\nThis is the table caption.\n\n\nDefault\nLeft\nRight\nCenter\n\n\n\n\n1\n2\n3\n4\n\n\n22\n23\n24\n25\n\n\n4\n3\n2\n1\n\n\n\nFinally, similar to what we do to internally reference equations and figures in our document, we can also label tables using the pattern #tbl-label to reference it as @tbl-label which is formatted like this: Table 4.1.\n| Default | Left | Right | Center |\n|---------|:-----|------:|:------:|\n| 1       | 2    |     3 |    4   |\n| 22      | 23   |    24 |   25   |\n| 4       | 3    |     2 |   1    |\n\n: This is the table caption. {#tbl-label .striped .hover}\n\n\n\nTable 4.1: This is the table caption.\n\n\n\n\n\nDefault\nLeft\nRight\nCenter\n\n\n\n\n1\n2\n3\n4\n\n\n22\n23\n24\n25\n\n\n4\n3\n2\n1\n\n\n\n\n\n\nThe same tag pattern should be used in the code chunk identification option #| label: tbl-label if we later want to reference the table generated by that code chunk with a cross-reference.\nMore details can be found on creating subtables, changing caption location, as well as creating grid tables that use a different syntax and allow arbitrary block elements to be included in each cell (multiple paragraphs, code blocks, unnumbered or numbered lists, etc.).\n+-----------+-----------+--------------------+\n| Fruit     | Price     | Benefits           |\n+===========+===========+====================+\n| Bananas   | $1.34     | - wrapping         |\n|           |           | - brilliant colour |\n+-----------+-----------+--------------------+\n| Oranges   | $2.10     | - rich in vitam. C |\n|           |           | - tasty            |\n+-----------+-----------+--------------------+\n\n: Sample grid table.\n\nSample grid table.\n\n\n\n\n\n\n\nFruit\nPrice\nBenefits\n\n\n\n\nBananas\n$1.34\n\nwrapping\nbrilliant colour\n\n\n\nOranges\n$2.10\n\nrich in Vitam. C\ntasty\n\n\n\n\n\n\n4.5.4 Callouts\nIt is possible to include callout blocks, to highlight practical notes, warnings, or tips of special interest. In addition, a title is often given to the callout to make it even more informative.\n::: {.callout-note}\n## Callout title\n\nThere are five different types of callouts:\n`note`, `tip`, `warning`, `caution`, and `important`.\n:::\n\n\n\n\n\n\nCallout title\n\n\n\nThere are five different types of callouts: note, tip, warning, caution, and important.\n\n\n\nIntroduction to using callouts in Quarto.\n\n\n\n4.5.5 Bibliographic references\nThe management of bibliographic references in Quarto is done by encoding the information in BibTeX format. This allows you to use any of the bibliographic citation formats supported by this package, or to include a CLS file that defines a standard format (APA, Chicago, IEEE, etc.).\nFor example, the document options\n---\ntitle: \"My Document\"\nbibliography: references.bib\ncsl: nature.csl\n---\nindicate a references.bib file where we can store the information about bibliographic references (which we can obtain from Google Scholar, Zotero or other tools and services on the Internet), as well as a citation style file nature.cls (style defined by the Nature publisher).\n\nCLS repository with citation styles.\nZotero repository with citation styles.\n\nDepending on the style and format of the citation, we can use one or another syntax to indicate the author and the year in parentheses, the author outside the parentheses, page numbers, chapters, etc.\n\nQuarto citation syntax reference table.\n\nFinally, the ordered list of bibliographic references (according to the citation style criteria we have selected) must appear at the end of the document. To achieve this in an HTML document, we must include a special code, which is normally placed in a separate, unnumbered section, as shown in Figure 4.9.\n\n\n\n\n\n\nFigure 4.9: Syntax to display bibliographical references at the end of the document.\n\n\n\nWhen the generated output is in PDF format and the BibLaTeX or natbib reference management engines are used, then the list of references always appears at the end of the document and the previous tag is ignored. Finally, in the rare case that we do not want to include any bibliographical references in our document, we can include in the header metadata the option suppress-bibliography: true.\n\n\n4.5.6 General document style\nSo far, the example document we have shown as well as these notes always use a style format or theme from the Bootstrap web development environment, called cosmo. However, there is a wide list of alternative themes to modify the general style of our document (color scheme, typography and font size, organization of content, appearance of links, etc.). The Quarto project is responsible for regularly combining the most popular style themes so that they are available as an option for the document.\nIn this theme directory on GitHub you can check an updated list of the possible values ​​that we can assign to the theme option in the header of the document. It is useful to experiment with various options to find the one that best suits the type of document generated, its content and the audience it is intended for.\nAn online demo of many of the available themes can be accessed on the website https://bootswatch.com/.",
    "crumbs": [
      "Quarto",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Individual Documents</span>"
    ]
  },
  {
    "objectID": "05-books.html",
    "href": "05-books.html",
    "title": "5  Books",
    "section": "",
    "text": "5.1 Creating a book project\nThe first step is to create a book project, using the IDE of our choice, for example, RStudio. The Figure 5.1 shows the RStudio interface for creating a new book project with Quarto. As usual, we select a name for the directory that stores the project as shown in the Figure 5.2.",
    "crumbs": [
      "Quarto books",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Books</span>"
    ]
  },
  {
    "objectID": "05-books.html#creating-a-book-project",
    "href": "05-books.html#creating-a-book-project",
    "title": "5  Books",
    "section": "",
    "text": "Figure 5.1: RStudio interface for creating a new Quarto project of type book.\n\n\n\n\n\n\n\n\n\nFigure 5.2: Dialog to indicate the name of the directory that stores the book project and some basic configuration options, such as the execution engine for code blocks embedded in documents (highlighted in red).\n\n\n\n\nHome page for the Quarto tutorial on books.",
    "crumbs": [
      "Quarto books",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Books</span>"
    ]
  },
  {
    "objectID": "05-books.html#configuration-options",
    "href": "05-books.html#configuration-options",
    "title": "5  Books",
    "section": "5.2 Configuration options",
    "text": "5.2 Configuration options\nUnlike individual documents, in projects such as book type projects that group several documents (.qmd files) into a single collection, we can specify global configuration options for the entire project in a separate _quarto.yml file, which must be present in the root directory of our project.\nBy default, the configuration options presented by this file in a newly created project of this type are the following.\nproject:\n  type: book\n\nbook:\n  title: \"First book\"\n  author: \"Norah Jones\"\n  date: \"20/12/2024\"\n  chapters:\n    - index.qmd\n    - intro.qmd\n    - summary.qmd\n    - references.qmd\n\nbibliography: references.bib\n\nformat:\n  html:\n    theme: cosmo\n  pdf:\n    documentclass: scrreprt\n\neditor: visual\nThe new elements in this list of options are:\n\nproject –&gt; type: book: Allows you to indicate the type of project you want to set up so that Quarto adjusts its behavior and can group a collection of documents. It activates the interpretation of options related to this type of project.\nbook: New category of options that indicates the specific configuration applicable to all documents in this project, as well as global options. For instance, the title, author, and date will be displayed on a special cover page.\nchapters: New subcategory of options that allows you to insert a list of file names that contain the different sections or chapters of your book.\n\nWe must keep in mind that the sections or chapters will be processed in exactly the same order in which they appear in this list, so it is important to pay attention to this order.",
    "crumbs": [
      "Quarto books",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Books</span>"
    ]
  },
  {
    "objectID": "05-books.html#home-page-preface",
    "href": "05-books.html#home-page-preface",
    "title": "5  Books",
    "section": "5.3 Home page (preface)",
    "text": "5.3 Home page (preface)\nIn addition to the new _quarto.yml file, another file called index.qmd is generated which contains the material that will be presented as the cover of the book or collection of documents.\nA general file is also created in other types of projects, for example for the home page of a website generated with Quarto. It is in this cover page that the general configuration information is contained (title, authors, date, etc.).\nThe content of this file is the same as in any other document, following the same Quarto syntax rules for .qmd files that we have already seen.\nIt should also be noted that the title of this cover page is not usually numbered and, therefore, it is common for it to be configured as:\n# Preface {.unnumbered}",
    "crumbs": [
      "Quarto books",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Books</span>"
    ]
  },
  {
    "objectID": "05-books.html#writing-tools",
    "href": "05-books.html#writing-tools",
    "title": "5  Books",
    "section": "5.4 Writing tools",
    "text": "5.4 Writing tools\nAll the writing tools we have already seen in the Chapter 4 can be used in the case of chapters in a book. It is important to note that links to sections also work from documents in other sections or chapters of the book, even if they are in a different file.\n\n5.4.1 Book structure\nIn addition to standard chapters, we can also organize the book’s content into parts (which group together related chapters), as well as appendices, presented after the main content of the book to provide additional material.\nLet’s look at an example of a book configuration that includes several parts and that we can integrate into the rest of the project configuration, within the _quarto.yml file.\nchapters:\n  - index.qmd\n  - preface.qmd\n  - part: dice.qmd\n    chapters: \n      - basics.qmd\n      - packages.qmd\n  - part: cards.qmd\n    chapters:\n      - objects.qmd\n      - notation.qmd\n      - modifying.qmd\n      - environments.qmd\nIt is important to note that in this case the part option can accept either a file with a .qmd extension (as in the example), or a quoted string that simply indicates a title for the part.\nNow we present an example for appendices.\nbook:\n  title: \"mybook\"\n  author: \"Jane Doe\"\n  date: \"5/9/2021\"\n  chapters:\n    - index.qmd\n    - intro.qmd\n    - summary.qmd\n    - references.qmd\n  appendices:\n    - tools.qmd\n    - resources.qmd\nIt is important to note that these configuration options generate the appropriate output (parts and appendices) both in the case of HTML websites and when generating a PDF document, following in the second case the standard LaTeX syntax to indicate the structure of the document.\n\nExample of a well-known book by H. Wickham created in Quarto and publicly accessible, which is organized in parts that group chapters.\nAdditional configuration options for the structure of a book in Quarto.",
    "crumbs": [
      "Quarto books",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Books</span>"
    ]
  },
  {
    "objectID": "05-books.html#managing-references",
    "href": "05-books.html#managing-references",
    "title": "5  Books",
    "section": "5.5 Managing references",
    "text": "5.5 Managing references\nAs mentioned above, internal references (to figures, tables, equations, and other sections of the document, among other items) work exactly the same as in individual documents (see Section 4.5.1), with the added advantage that in a book that combines different chapters, the numbering of all items is updated to reflect the chapter number as a prefix to the item number (e.g., “Figure 1.2” for the second figure in chapter 1).\nIt is important to note that for automatic item numbering to work properly, it is important that items begin with the appropriate prefix (#sec- for sections, #fig- for figures, etc.).",
    "crumbs": [
      "Quarto books",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Books</span>"
    ]
  },
  {
    "objectID": "05-books.html#project-preview",
    "href": "05-books.html#project-preview",
    "title": "5  Books",
    "section": "5.6 Project preview",
    "text": "5.6 Project preview\nTo preview on our local machine the project we have created using RStudio, we must select the Build tab in the upper right panel and press the Render Book button to generate all the output formats that are configured in the _quarto.yml file, as shown in Figure 5.3. There is also the option to select only one of these output formats by carefully clicking on the small arrow next to the “Render Book” button, to display a list of output format options and select one of them, as shown in Figure 5.4\n\n\n\n\n\n\nFigure 5.3: Button to launch the book preview process in RStudio.\n\n\n\n\n\n\n\n\n\nFigure 5.4: List of configuration options that appear when clicking the arrow next to the Render Book button",
    "crumbs": [
      "Quarto books",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Books</span>"
    ]
  },
  {
    "objectID": "05-books.html#sec-pub-options",
    "href": "05-books.html#sec-pub-options",
    "title": "5  Books",
    "section": "5.7 Publication options",
    "text": "5.7 Publication options\nThere are several [publishing options] to make our book or collection of documents available to other users, including:\n\nQuarto Pub.\nGitHub Pages, very convenient if we want an integrated solution for version management of our project’s source code.\nNetlify, a professional web publishing platform that allows more configuration and setup options.\n\nIt is also possible to use other services to publish documents, books, and websites with Quarto, including GitLab (an alternative to GitHub), although they will not be as automated and integrated with the tools offered by Quarto as the previous options.",
    "crumbs": [
      "Quarto books",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Books</span>"
    ]
  },
  {
    "objectID": "05-books.html#customisation-and-templates",
    "href": "05-books.html#customisation-and-templates",
    "title": "5  Books",
    "section": "5.8 Customisation and templates",
    "text": "5.8 Customisation and templates\nAs we have explained for individual documents, analogous configuration options can be used to customize the style and design theme that we can apply to our book or collection of documents, both in the HTML website version and in the PDF output version.\n\nGuide to customizing the style of books in Quarto.\nExample gallery of some styles to customize the appearance of Quarto documents.",
    "crumbs": [
      "Quarto books",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Books</span>"
    ]
  },
  {
    "objectID": "06-field-guide.html",
    "href": "06-field-guide.html",
    "title": "6  Creting a field guide",
    "section": "",
    "text": "6.1 Templates",
    "crumbs": [
      "Quarto books",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Creting a field guide</span>"
    ]
  },
  {
    "objectID": "06-field-guide.html#project-management",
    "href": "06-field-guide.html#project-management",
    "title": "6  Creting a field guide",
    "section": "6.2 Project management",
    "text": "6.2 Project management",
    "crumbs": [
      "Quarto books",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Creting a field guide</span>"
    ]
  },
  {
    "objectID": "06-field-guide.html#publishing",
    "href": "06-field-guide.html#publishing",
    "title": "6  Creting a field guide",
    "section": "6.3 Publishing",
    "text": "6.3 Publishing",
    "crumbs": [
      "Quarto books",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Creting a field guide</span>"
    ]
  },
  {
    "objectID": "07-manuscripts.html",
    "href": "07-manuscripts.html",
    "title": "7  Scientific publications",
    "section": "",
    "text": "7.1 The keep-tex option: true\nIf you review the examples offered in the publication template creation guide, you will see as in the output format options of the template.qmd file, within the PDF output the keep-tex: true option is usually included. This option forces the file not to be deleted LaTeX (with .tex extension) that is created as a previous step to compile the final document in PDF. The reason is to allow the user to modify the file if necessary. LaTeX directly and compile it manually.\nHowever, remember that if you press the Render button again for the PDF format in RStudio, or run quarto render --to pdf on the command line, said file with .tex extension it is overwritten and we would lose the changes we have made. Consequently, it is better to copy it to another location before making manual adjustments or create a new one branch (if we use version control) to adjust the file in it without the risk to overwrite the changes made.",
    "crumbs": [
      "Publications",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scientific publications</span>"
    ]
  },
  {
    "objectID": "07-manuscripts.html#figures-and-graphs-for-publication",
    "href": "07-manuscripts.html#figures-and-graphs-for-publication",
    "title": "7  Scientific publications",
    "section": "7.2 Figures and graphs for publication",
    "text": "7.2 Figures and graphs for publication\nAn important advantage of using Quarto to create our articles is being able to integrate the results of the execution of our code (graphs, tables, results of evaluation of models and algorithms, etc.) directly in our scientific documents. This greatly mitigates the drawbacks already mentioned at the beginning of the workshop to keep all elements updated, allowing us to ensure that we are using the correct version of the code on the appropriate data.\n\nPublication Perfect: a tutorial with open online materials on how to improve the elements of our publications and articles, created by the Harvard Chan Bioinformatics Core group.\n\nLet’s remember some of the packages in R that allow us to create graphs and tables now prepared for publication:\n\nHmisc: includes many functions for description of data and creation of graphs and tables summarizing data and models, ready to publish.\nExamples reproducible with Hmisc. It is indicated that the examples are for R Markdown, but they actually work also for Quarto (since that the same knitr engine is used by default to process and execute the blocks of code.)\nsummarytools: offers many features and tools to present summaries of data tables and data frames, both in table as in graphs for EDA.\nExamples of use of summarytools.\nggpubr: package to help customize graphics created with ggplot2, so that they are ready for inclusion in publications scientific.\nCollection of tutorials and examples for creating graphs with ggpubr.\nList and examples of packages to create tables in publications.",
    "crumbs": [
      "Publications",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scientific publications</span>"
    ]
  },
  {
    "objectID": "07-manuscripts.html#facilitate-citation-of-articles",
    "href": "07-manuscripts.html#facilitate-citation-of-articles",
    "title": "7  Scientific publications",
    "section": "7.3 Facilitate citation of articles",
    "text": "7.3 Facilitate citation of articles\nIn a context of the academic and research world in which the volume of works and published articles has grown exponentially in digital media, it is very It is important to facilitate the work of other researchers as much as possible when they want to cite our publications. On the other hand, there are many reference services of citations and databases that help researchers find materials that they should review.\nWe can include metadata in our document to facilitate full automation or partial of this process of indexing publications and citations of our work.\nThe following tutorial shows several examples of metadata fields to facilitate the citations that we can include in the header of the document, including information about the journal or publication that contains the article (such as the DOI), as well as specific formats compatible with scientific bibliography indexing engines such as Google Scholar.\n\nGuide for creating citable articles in Quarto.\n\nBy default, when we include this information in the header of the Quarto document it must create an appendix with the citation information in plain text and in BibTeX.",
    "crumbs": [
      "Publications",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scientific publications</span>"
    ]
  },
  {
    "objectID": "07-manuscripts.html#example-of-using-scientific-article-templates",
    "href": "07-manuscripts.html#example-of-using-scientific-article-templates",
    "title": "7  Scientific publications",
    "section": "7.4 Example of using scientific article templates",
    "text": "7.4 Example of using scientific article templates\n\n7.4.1 Elsevier Magazine Template\n\n\n\n\n\n\nPrerequisite: have LaTeX installed\n\n\n\nThis section shows how to generate a draft of an article to send to a scientific journal from the Elsevier publishing house. For this process to work, remember You must previously have a LaTeX distribution installed on your computer (such as TeX Live) or install the minimal TinyTeX distribution in RStudio.\n\n\nIn this case, the steps to follow are quite simple:\n\nWe create a new directory to save our project, for example, a folder with the name example-elsevier.\nIn the terminal (for example in RStudio, tab in the bottom left panel), We enter the newly created folder and execute a command to download the template and start using it:\n\n\n\nTerminal\n\ncd example-elsevier\nquarto use template quarto-journals/elsevier\n\n\nWe create a new project in RStudio on the already existing directory in which we have downloaded the template files.\nWe open the file example-elsevier.qmd and press the Render button to generate the the output in PDF.\n\nIf we had previously created our project with a generic Quarto document, it will not we have to start from scratch. Just open a terminal inside the project directory and execute:\n\n\nTerminal\n\nquarto add quarto-journals/elsevier\n\nFinally, if we want to generate the draft article in PDF format from the command line, we execute:\n\n\nTerminal\n\nquarto render article.qmd --to elsevier-pdf\n\nTake a good look at the output format option specified in the .qmd file to generate the draft article:\n\n\nexample-elsevier.qmd\n\nformat:\n  elsevier-pdf:\n    keep-tex: true",
    "crumbs": [
      "Publications",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Scientific publications</span>"
    ]
  },
  {
    "objectID": "08-FAIR.html",
    "href": "08-FAIR.html",
    "title": "8  FAIR Principles",
    "section": "",
    "text": "8.1 Overview\nFor years, a movement has developed within the scientific community unstoppable to promote access to all information related to jobs, experiments and scientific publications, so that their validation is facilitated and reproduction/replication by other interested researchers or experts.\nThis movement has especially concentrated, in its initial phase, on guaranteeing at least access to the raw materials necessary to develop many of these projects: the data. The fundamental principles that must be met so that data can be indexed and reused as much as possible, they are called FAIR Principles and are included, among other sources, in the European Commission guidance documents for researchers participating in projects funded by said organization. These FAIR principles were initially established by Wilkinson et al. (2016) and they are:\nIt is important to emphasize the importance of publishing openly and following good reviewable and reproducible/replicable research practices. For example, The National Commission for the Evaluation of Research Activity (CNEAI) has published in 2023-2024 new criteria for evaluation of publications valid for be able to be evaluated in the granting of a six-year period of research. Likewise, in all the recent calls financed by the different ministries of the Government of Spain It is required that research results, especially all publications, datasets, software and procedures are publicly accessible and comply with FAIR principles.\nHowever, there is still some way to go. A recent study (Kumar et al., 2024) analyzed the degree of compliance with the FAIR principles (the so-called FAIRness) of the results research published by recently funded multi-stakeholder projects within the European H2020 framework program and related to the agri-food sector. As main conclusions, less than 10% of the projects analyzed managed to comply with the FAIR principles, although these principles were fulfilled to a greater extent in the articles of research published in journals and conferences, as well as in books.\nIn general, another conclusion is that the European agri-food and rural sector is becoming increasingly dependent on data and that the application of the principles FAIR contributes to improving decision-making and better exploiting innovation results derived from these projects. However, it is also noted that the research community for the development of the agri-food and rural sector still has limited experience in the application of these principles.",
    "crumbs": [
      "Publications",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>FAIR Principles</span>"
    ]
  },
  {
    "objectID": "08-FAIR.html#overview",
    "href": "08-FAIR.html#overview",
    "title": "8  FAIR Principles",
    "section": "",
    "text": "Findable: Data and metadata (data that describes the data, such as its format, content, meaning, link with other data, etc.) must receive a globally unique and persistent identifier that allows it to be located directly. The most used standard today is the DOI system (ISO 26324). The metadata must include clearly and explicitly identify the data they describe, and both data and metadata must be registered or indexed in sources that allow their search and retrieval.\nAccessible: Data and metadata must be obtainable through a standard and open communication protocol. Metadata must continue to remain accessible even when the data is no longer available.\nInteroperable: Data and metadata must use standard and open knowledge representation formats, vocabularies that follow FAIR principles and must include references to other data and metadata with which they are related.\nReusable: The data and metadata are described in a rich and precise manner, with multiple relevant attributes that facilitate their use by other users.",
    "crumbs": [
      "Publications",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>FAIR Principles</span>"
    ]
  },
  {
    "objectID": "08-FAIR.html#publication-of-source-code-and-technical-documentation",
    "href": "08-FAIR.html#publication-of-source-code-and-technical-documentation",
    "title": "8  FAIR Principles",
    "section": "8.2 Publication of source code and technical documentation",
    "text": "8.2 Publication of source code and technical documentation\n\nPlatforms like GitHub and GitLab make project management and publishing much easier software within research initiatives and projects, as well as publication and maintenance of digital technical documentation centers on tools, procedures and good practices related to the activity of said initiatives.\nExamples of the SoilWise project, funded within the HE program of the European Community.\n\nSoilWise digital co-creation space on GitHub. It has been achieved creating an organization (free of charge), so that repositories can be created on this platform, grouped under the umbrella of the project, for different purposes: lists of software of interest, technical documentation, user manuals, architecture of the proposed platform, etc.\nDocumentation Center. Here we use the MkDocs solution, which works with the Python language (Quarto has great advantages in this aspect).\nRepository with data collection tools, documented in the page describing the data collection process in the project infrastructure.\n\nOpen repositories of data and research material such as Zenodo and Figshare can help publicize and cite research material. For example, Zendo can issue a persistent identifier (DOI) for a software repository on GitHub pointing to a particular version of the software that has been released and tagged from that project on GitHub. This allows it to be included in a scientific publication to know with certainty what exact version of the code was software has been used to perform the work reported in that publication.\n\nAs an example, Figure 8.1 shows the Zenodo page corresponding to the PyMPDATA software, which points to the original software repository hosted on GitHub, shown in turn in the Figure 8.2. we can see metadata cross-references that maintain connection consistency in both directions.\n\n\n\n\n\n\nFigure 8.1: PyMPDATA project page (v1.2.0) at Zenodo\n\n\n\n\n\n\n\n\n\nFigure 8.2: PyMPDATA (v1.2.0) project page on GitHub\n\n\n\n\nThe project page in Zenodo points to a specific version of the GitHub repository, and maintains a list of all the previously referenced versions of the same project. Each new version receives a different DOI, to differentiate them univocally.\nThe repository description page on GitHub displays, among other tags, the DOI for that version in particular, the DOI to the scientific article published in JOSS explaining this software, as well as other labels for attribution of project financing sources.",
    "crumbs": [
      "Publications",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>FAIR Principles</span>"
    ]
  },
  {
    "objectID": "08-FAIR.html#dataset-publication",
    "href": "08-FAIR.html#dataset-publication",
    "title": "8  FAIR Principles",
    "section": "8.3 Dataset publication",
    "text": "8.3 Dataset publication\n\nZenodo is, probably along with Figshare, one of the most well-known and widely used open data repositories in research, especially in Europe, being a project integrated into OpenAIRE, a non-profit organization created by the European Union to promote open science.\nScientific publications in open access (open access).\nImportant to link the DOI of a dataset in an article, so that they can be traced (in reverse) the DOIs of the publications that use said dataset.",
    "crumbs": [
      "Publications",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>FAIR Principles</span>"
    ]
  },
  {
    "objectID": "08-FAIR.html#reference-management-and-open-publication",
    "href": "08-FAIR.html#reference-management-and-open-publication",
    "title": "8  FAIR Principles",
    "section": "8.4 Reference management and open publication",
    "text": "8.4 Reference management and open publication\nIn addition to the assignment of a DOI to articles, data sets, software and other elements of research work, there are some additional tools that facilitate the identification of the works and the attribution of their authorship (many of them with support explicit in Quarto)\n\nThe ORCID is a free, unique and persistent identifier for individuals who engage in research, innovation and academic activities. Allows you to identify quickly the identity of an author in a publication or scientific work or the person in charge to publish and maintain a resource (dataset, software repository, etc.). Furthermore, the ORCID allows you to generate a list of all the contributions made by the identified individual.\nThere is an extensive list of preprints files that allow the publication of preliminary works that have not yet gone through a review process by pairs for publication in a magazine. More and more publishers accept (and even encourage) publication of these documents to quickly record research progress, due to the high times required by the review and publication process in many prestigious journals.\nPLOS is a non-profit Open Access publisher, which edits and publishes several high-impact, wide-spread digital magazines in many areas including, transformation and sustainability.\n\nA growing number of publishers are also adopting open publishing principles (Open Access), although usually impacting a significant cost on the authors or the institutions to which they are affiliates to cover publication costs.\n\nGuide to creating citable articles with Quarto.\n\n\n\n\n\nKumar, P., Hendriks, T., Panoutsopoulos, H., & Brewster, C. (2024). Investigating FAIR data principles compliance in horizon 2020 funded agri-food and rural development multi-actor projects. Agricultural Systems, 214, 103822. https://doi.org/https://doi.org/10.1016/j.agsy.2023.103822\n\n\nWilkinson, M. D., Dumontier, M., Aalbersberg, Ij. J., Appleton, G., Axton, M., Baak, A., Blomberg, N., Boiten, J.-W., Silva Santos, L. B. da, Bourne, P. E., et al. (2016). The FAIR Guiding Principles for scientific data management and stewardship. Scientific Data, 3(1), 1–9. https://doi.org/https://doi.org/10.1038/sdata.2016.18",
    "crumbs": [
      "Publications",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>FAIR Principles</span>"
    ]
  },
  {
    "objectID": "09-add-resources.html",
    "href": "09-add-resources.html",
    "title": "9  Additional resources",
    "section": "",
    "text": "9.1 Quarto",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Additional resources</span>"
    ]
  },
  {
    "objectID": "09-add-resources.html#quarto",
    "href": "09-add-resources.html#quarto",
    "title": "9  Additional resources",
    "section": "",
    "text": "Getting started: https://quarto.org/docs/get-started/.\nComplete guide (online): https://quarto.org/docs/guide/.\nReference of functions and options (online): https://quarto.org/docs/reference/.\nGallery of example projects: https://quarto.org/docs/gallery/.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Additional resources</span>"
    ]
  },
  {
    "objectID": "09-add-resources.html#fair-principles-and-open-science",
    "href": "09-add-resources.html#fair-principles-and-open-science",
    "title": "9  Additional resources",
    "section": "9.2 FAIR principles and open science",
    "text": "9.2 FAIR principles and open science\n\nArticle on FAIR principles: https://www.nature.com/articles/sdata201618.\nMandate on scientific data management in the Horizon Europe (EC) Programme: https://www.openaire.eu/how-to-comply-with-horizon-europe-mandate-for-rdm.\n\nAll HE projects must publish at the beginning of the work plan a Data Management Plan (DMP), explaining in great detail how they will be obtained, processed, analyze and manage the data used and generated in the project activities.\n\nDMP TOOL: Online tool to create DMPs following a structured procedure.\n\n“How to make your data FAIR”: https://www.openaire.eu/how-to-make-your-data-fair.\nData Management Plan (University) of Cambridge.\n\nROpenSci Community: https://ropensci.org/es/.\nROpenSpain Community: https://ropenspain.es/.",
    "crumbs": [
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Additional resources</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Barba, L. A. (2018). Terminologies for reproducible research. arXiv\nPreprint arXiv:1802.03311.\n\n\nBegley, C., & Ellis, L. (2012). Drug\ndevelopment: Raise standards for preclinical cancer research.\nNature.[Online]. 483 (7391).\n\n\nBrainard, J., You, J., et al. (2018). What a massive database of\nretracted papers reveals about science publishing’s “death\npenalty.” Science, 25(1), 1–5.\n\n\nBurman, L. E., Reed, W. R., & Alm, J. (2010). A call for replication\nstudies. Public Finance Review, 38(6), 787–793.\n\n\nIoannidis, J. P. (2005). Why most published research findings are false.\nPLoS Medicine, 2(8), e124.\n\n\nKnuth, D. E. (1984). Literate programming. Comput. J.,\n27(2), 97–111. https://doi.org/10.1093/comjnl/27.2.97\n\n\nKumar, P., Hendriks, T., Panoutsopoulos, H., & Brewster, C. (2024).\nInvestigating FAIR data principles compliance in horizon\n2020 funded agri-food and rural development multi-actor projects.\nAgricultural Systems, 214, 103822. https://doi.org/https://doi.org/10.1016/j.agsy.2023.103822\n\n\nLeek, J. T., & Peng, R. D. (2015). Reproducible\nresearch can still be wrong: Adopting a prevention approach.\nProceedings of the National Academy of Sciences,\n112(6), 1645–1646.\n\n\nPeng, R. D. (2011). Reproducible research in computational science.\nScience, 334(6060), 1226–1227.\n\n\nWicherts, J. M., Borsboom, D., Kats, J., & Molenaar, D. (2006). The\npoor availability of psychological research data for reanalysis.\nAmerican PAsychologist, 61(7), 726.\n\n\nWilkinson, M. D., Dumontier, M., Aalbersberg, Ij. J., Appleton, G.,\nAxton, M., Baak, A., Blomberg, N., Boiten, J.-W., Silva Santos, L. B.\nda, Bourne, P. E., et al. (2016). The FAIR\nGuiding Principles for scientific data\nmanagement and stewardship. Scientific Data, 3(1),\n1–9. https://doi.org/https://doi.org/10.1038/sdata.2016.18",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "A-command-ref.html",
    "href": "A-command-ref.html",
    "title": "Appendix A — Code reference",
    "section": "",
    "text": "A.1 Quarto statements",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Code reference</span>"
    ]
  },
  {
    "objectID": "A-command-ref.html#r-statements",
    "href": "A-command-ref.html#r-statements",
    "title": "Appendix A — Code reference",
    "section": "A.2 R statements",
    "text": "A.2 R statements",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Code reference</span>"
    ]
  },
  {
    "objectID": "B-IDEs.html",
    "href": "B-IDEs.html",
    "title": "Appendix B — Integrated Development Environments for Quarto",
    "section": "",
    "text": "B.1 R Studio",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Integrated Development Environments for Quarto</span>"
    ]
  },
  {
    "objectID": "B-IDEs.html#visual-studio",
    "href": "B-IDEs.html#visual-studio",
    "title": "Appendix B — Integrated Development Environments for Quarto",
    "section": "B.2 Visual Studio",
    "text": "B.2 Visual Studio",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Integrated Development Environments for Quarto</span>"
    ]
  },
  {
    "objectID": "B-IDEs.html#positron",
    "href": "B-IDEs.html#positron",
    "title": "Appendix B — Integrated Development Environments for Quarto",
    "section": "B.3 Positron",
    "text": "B.3 Positron",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Integrated Development Environments for Quarto</span>"
    ]
  },
  {
    "objectID": "C-packages.html",
    "href": "C-packages.html",
    "title": "Appendix C — Useful R packages",
    "section": "",
    "text": "C.1 Ecology",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Useful R packages</span>"
    ]
  },
  {
    "objectID": "C-packages.html#data-visualisation",
    "href": "C-packages.html#data-visualisation",
    "title": "Appendix C — Useful R packages",
    "section": "C.2 Data visualisation",
    "text": "C.2 Data visualisation",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Useful R packages</span>"
    ]
  },
  {
    "objectID": "C-packages.html#data-processing",
    "href": "C-packages.html#data-processing",
    "title": "Appendix C — Useful R packages",
    "section": "C.3 Data processing",
    "text": "C.3 Data processing\n\nC.3.1 Tidyverse\n\n\nC.3.2 Alternatives to the Tidyverse\n\n\nC.3.3 Pipelines",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Useful R packages</span>"
    ]
  },
  {
    "objectID": "C-packages.html#spatial-data",
    "href": "C-packages.html#spatial-data",
    "title": "Appendix C — Useful R packages",
    "section": "C.4 Spatial data",
    "text": "C.4 Spatial data\n\nC.4.1 sf (Simple Features)\n\n\nC.4.2 terra",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Useful R packages</span>"
    ]
  },
  {
    "objectID": "C-packages.html#time-series",
    "href": "C-packages.html#time-series",
    "title": "Appendix C — Useful R packages",
    "section": "C.5 Time series",
    "text": "C.5 Time series\n\nC.5.1 Tidyverts",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Useful R packages</span>"
    ]
  },
  {
    "objectID": "C-packages.html#data-visualisation-1",
    "href": "C-packages.html#data-visualisation-1",
    "title": "Appendix C — Useful R packages",
    "section": "C.6 Data visualisation",
    "text": "C.6 Data visualisation\n\nC.6.1 ggplot2",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Useful R packages</span>"
    ]
  },
  {
    "objectID": "C-packages.html#data-analysis-and-machine-learning",
    "href": "C-packages.html#data-analysis-and-machine-learning",
    "title": "Appendix C — Useful R packages",
    "section": "C.7 Data analysis and Machine Learning",
    "text": "C.7 Data analysis and Machine Learning\n\nC.7.1 Tidymodels\n\n\nC.7.2 mlr3",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Useful R packages</span>"
    ]
  },
  {
    "objectID": "D-pdf-latex.html",
    "href": "D-pdf-latex.html",
    "title": "Appendix D — Producing PDF documents",
    "section": "",
    "text": "D.1 PDF documents with Quarto",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Producing PDF documents</span>"
    ]
  },
  {
    "objectID": "D-pdf-latex.html#quick-latex-primer",
    "href": "D-pdf-latex.html#quick-latex-primer",
    "title": "Appendix D — Producing PDF documents",
    "section": "D.2 Quick LaTeX primer",
    "text": "D.2 Quick LaTeX primer",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Producing PDF documents</span>"
    ]
  },
  {
    "objectID": "D-pdf-latex.html#available-templates",
    "href": "D-pdf-latex.html#available-templates",
    "title": "Appendix D — Producing PDF documents",
    "section": "D.3 Available templates",
    "text": "D.3 Available templates",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Producing PDF documents</span>"
    ]
  }
]